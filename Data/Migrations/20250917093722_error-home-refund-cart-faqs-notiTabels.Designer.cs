// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    [Migration("20250917093722_error-home-refund-cart-faqs-notiTabels")]
    partial class errorhomerefundcartfaqsnotiTabels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.ApiClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("APIType")
                        .HasColumnType("text");

                    b.Property<int>("AccessTokenExpiry")
                        .HasColumnType("integer");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("ClientToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("FullAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RefreshTokenExpiry")
                        .HasColumnType("integer");

                    b.Property<bool>("SlidingExpiration")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ApiClient");
                });

            modelBuilder.Entity("Domain.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("AppleAccessToken")
                        .HasColumnType("text");

                    b.Property<string>("AppleClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("AppleRefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("AppleTokenType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("DeletionConfirmCode")
                        .HasColumnType("text");

                    b.Property<string>("DeletionRequestURL")
                        .HasColumnType("text");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableNotification")
                        .HasColumnType("boolean");

                    b.Property<string>("EndpointArn")
                        .HasColumnType("text");

                    b.Property<string>("FacebookAccessToken")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("GoogleAccessToken")
                        .HasColumnType("text");

                    b.Property<bool>("HasTopic")
                        .HasColumnType("boolean");

                    b.Property<string>("Headers")
                        .HasColumnType("text");

                    b.Property<bool>("IsMobileDevice")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOTPEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubscriber")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<int?>("LevelId")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginDevice")
                        .HasColumnType("text");

                    b.Property<string>("LoginIPAddress")
                        .HasColumnType("text");

                    b.Property<string>("LoginIpCity")
                        .HasColumnType("text");

                    b.Property<string>("LoginIpCountry")
                        .HasColumnType("text");

                    b.Property<string>("LoginLocation")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobileAppId")
                        .HasColumnType("text");

                    b.Property<string>("NationalityId")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("OriginalTransactionId")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RegisterDevice")
                        .HasColumnType("text");

                    b.Property<string>("RegisterIPAddress")
                        .HasColumnType("text");

                    b.Property<string>("RegisterIpCity")
                        .HasColumnType("text");

                    b.Property<string>("RegisterIpCountry")
                        .HasColumnType("text");

                    b.Property<string>("RegisterLocation")
                        .HasColumnType("text");

                    b.Property<int?>("RegistrationId")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubscriptionTill")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TopicArn")
                        .HasColumnType("text");

                    b.Property<double?>("TotalScorePoint")
                        .HasColumnType("double precision");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RegistrationId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ArContent")
                        .HasColumnType("text");

                    b.Property<string>("ArDescription")
                        .HasColumnType("text");

                    b.Property<string>("ArLine1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ArLine2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ArPicture")
                        .HasColumnType("text");

                    b.Property<string>("ArYoutubeVideo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("BlockType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EnContent")
                        .HasColumnType("text");

                    b.Property<string>("EnDescription")
                        .HasColumnType("text");

                    b.Property<string>("EnLine1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EnLine2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EnPicture")
                        .HasColumnType("text");

                    b.Property<string>("EnYoutubeVideo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoURL")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Domain.Models.BookingTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("BookedSessionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Player")
                        .HasColumnType("text");

                    b.Property<bool>("Scanned")
                        .HasColumnType("boolean");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("interval");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserBookingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserBookingId");

                    b.ToTable("BookingTicket");
                });

            modelBuilder.Entity("Domain.Models.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableCapacityForSlots")
                        .HasColumnType("boolean");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<int>("NextAvailableDays")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("Domain.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CartStatus")
                        .HasColumnType("integer");

                    b.Property<int>("CartType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("Sessions")
                        .HasColumnType("integer");

                    b.Property<int?>("SubEventId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TaxPrice")
                        .HasColumnType("numeric");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("interval");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("integer");

                    b.Property<int?>("TrainerPackageId")
                        .HasColumnType("integer");

                    b.Property<int?>("TrainerSession")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Domain.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Domain.Models.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Android")
                        .HasColumnType("text");

                    b.Property<bool>("AnyFailedPaymentReturnToCart")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApplePay")
                        .HasColumnType("boolean");

                    b.Property<string>("ArFooterBrief")
                        .HasColumnType("text");

                    b.Property<string>("ArKeywords")
                        .HasColumnType("text");

                    b.Property<string>("ArMetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CleanCartAfter")
                        .HasColumnType("integer");

                    b.Property<int>("CleanOrderAfter")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DefaultEmailName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DefaultNotificationEmails")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("EmailSender")
                        .HasColumnType("text");

                    b.Property<string>("EnFooterBrief")
                        .HasColumnType("text");

                    b.Property<string>("EnKeywords")
                        .HasColumnType("text");

                    b.Property<string>("EnMetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("EnableOTP")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSubscription")
                        .HasColumnType("boolean");

                    b.Property<string>("Facebook")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GoogleAnalytics")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("GoogleAnalyticsEmail")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.Property<string>("IOS")
                        .HasColumnType("text");

                    b.Property<string>("Instagram")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Mada")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordEmailSender")
                        .HasColumnType("text");

                    b.Property<bool>("PayTabs")
                        .HasColumnType("boolean");

                    b.Property<int>("PointsPerOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("SEOScripts")
                        .HasColumnType("text");

                    b.Property<bool>("STCPay")
                        .HasColumnType("boolean");

                    b.Property<string>("Snapchat")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SocialPicture")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Tax")
                        .HasColumnType("integer");

                    b.Property<string>("Tiktok")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Twitter")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("UseSSL")
                        .HasColumnType("boolean");

                    b.Property<string>("WebsiteURL")
                        .HasColumnType("text");

                    b.Property<string>("Youtube")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Domain.Models.Desire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Desires");
                });

            modelBuilder.Entity("Domain.Models.ErrorMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("EnDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ErrorMessages");
                });

            modelBuilder.Entity("Domain.Models.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("EnDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("FAQS");
                });

            modelBuilder.Entity("Domain.Models.HomeBanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ArPicture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("EnDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EnPicture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<int>("LinkTarget")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("HomeBanners");
                });

            modelBuilder.Entity("Domain.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Domain.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Nationality");
                });

            modelBuilder.Entity("Domain.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("EnContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<int>("CartType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IpCity")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IpCountry")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IpLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<bool>("OrderCanceled")
                        .HasColumnType("boolean");

                    b.Property<bool>("OrderRefund")
                        .HasColumnType("boolean");

                    b.Property<string>("PackageName")
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentNote")
                        .HasColumnType("text");

                    b.Property<bool>("PaymentSuccess")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("RefundAmount")
                        .HasColumnType("numeric");

                    b.Property<int?>("Sessions")
                        .HasColumnType("integer");

                    b.Property<int?>("SubEventId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("interval");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<string>("TournamentName")
                        .HasColumnType("text");

                    b.Property<string>("TournamentType")
                        .HasColumnType("text");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("integer");

                    b.Property<string>("TrainerName")
                        .HasColumnType("text");

                    b.Property<int?>("TrainerPackageId")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserBookingId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserBookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Domain.Models.PersonalData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DesireId")
                        .HasColumnType("integer");

                    b.Property<int>("DesireToRegister")
                        .HasColumnType("integer");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("Genders")
                        .HasColumnType("integer");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DesireId");

                    b.HasIndex("NationalityId");

                    b.ToTable("PersonalDatas");
                });

            modelBuilder.Entity("Domain.Models.RefundOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPartial")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<string>("RefundReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("RefundOrder");
                });

            modelBuilder.Entity("Domain.Models.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<bool>("ApproveFirstApprovalBooking")
                        .HasColumnType("boolean");

                    b.Property<int>("ApproveStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("ApprovedCompleteThePassport")
                        .HasColumnType("boolean");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("text");

                    b.Property<string>("Certificates")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("DurationType")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("FirstApproval")
                        .HasColumnType("boolean");

                    b.Property<int>("Genders")
                        .HasColumnType("integer");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("IdNo")
                        .HasColumnType("text");

                    b.Property<string>("MartialArts")
                        .HasColumnType("text");

                    b.Property<bool>("MedicalApproval")
                        .HasColumnType("boolean");

                    b.Property<bool>("MedicalPending")
                        .HasColumnType("boolean");

                    b.Property<bool>("MoveToBookingApprovel")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParticipationPeriod")
                        .HasColumnType("integer");

                    b.Property<string>("PassportDocument")
                        .HasColumnType("text");

                    b.Property<string>("PassportUploadToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PassportUploadTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<bool>("SecurityApproval")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SendAtAccreditation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SendCompleteThePassportPhotoDataEmailAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SendEmailAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SendEmailMedical")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SendEmailMedicalAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SendFirstApprovalBooking")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SendFirstApprovalBookingAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SendToAccreditation")
                        .HasColumnType("boolean");

                    b.Property<int>("SentBookingCount")
                        .HasColumnType("integer");

                    b.Property<int>("SentCompletePassportDocumentCount")
                        .HasColumnType("integer");

                    b.Property<bool>("SentCompleteThePassportPhotoDataEmail")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("NationalityId");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("Domain.Models.SNSSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionArn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("SNSSubscription");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllDates")
                        .HasColumnType("boolean");

                    b.Property<int>("CalendarId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("FridayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("FridayAnotherAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<int>("FridayAnotherCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FridayAnotherFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FridayAnotherMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("FridayAnotherPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("FridayAnotherShift")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FridayAnotherTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FridayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("FridayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FridayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FridayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("FridayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("FridayTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("MondayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("MondayAnotherAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<int>("MondayAnotherCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("MondayAnotherFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MondayAnotherMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MondayAnotherPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("MondayAnotherShift")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("MondayAnotherTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("MondayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("MondayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("MondayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MondayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MondayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("MondayTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SaturdayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("SaturdayAnotherAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<int>("SaturdayAnotherCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SaturdayAnotherFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SaturdayAnotherMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SaturdayAnotherPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("SaturdayAnotherShift")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SaturdayAnotherTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SaturdayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("SaturdayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SaturdayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SaturdayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SaturdayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("SaturdayTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SundayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("SundayAnotherAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<int>("SundayAnotherCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SundayAnotherFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SundayAnotherMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SundayAnotherPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("SundayAnotherShift")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SundayAnotherTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SundayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("SundayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SundayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SundayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SundayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("SundayTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ThursdayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("ThursdayAnotherAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<int>("ThursdayAnotherCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ThursdayAnotherFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ThursdayAnotherMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ThursdayAnotherPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("ThursdayAnotherShift")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ThursdayAnotherTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ThursdayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("ThursdayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ThursdayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ThursdayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ThursdayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ThursdayTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TuesdayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("TuesdayAnotherAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<int>("TuesdayAnotherCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TuesdayAnotherFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TuesdayAnotherMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TuesdayAnotherPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("TuesdayAnotherShift")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("TuesdayAnotherTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TuesdayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("TuesdayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TuesdayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TuesdayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TuesdayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TuesdayTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("WednesdayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("WednesdayAnotherAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<int>("WednesdayAnotherCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WednesdayAnotherFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WednesdayAnotherMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("WednesdayAnotherPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("WednesdayAnotherShift")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("WednesdayAnotherTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("WednesdayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("WednesdayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WednesdayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WednesdayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("WednesdayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("WednesdayTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Domain.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("FridayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("FridayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("FridayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FridayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FridayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("FridayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("FridayTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("MondayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("MondayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("MondayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("MondayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MondayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MondayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("MondayTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SaturdayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("SaturdayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("SaturdayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SaturdayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SaturdayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SaturdayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("SaturdayTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer");

                    b.Property<bool>("SundayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("SundayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("SundayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SundayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SundayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SundayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("SundayTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ThursdayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("ThursdayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("ThursdayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ThursdayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ThursdayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ThursdayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ThursdayTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TuesdayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("TuesdayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("TuesdayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TuesdayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TuesdayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TuesdayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TuesdayTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("WednesdayAfterMidnight")
                        .HasColumnType("boolean");

                    b.Property<bool>("WednesdayAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("WednesdayCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WednesdayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WednesdayMatchTime")
                        .HasColumnType("integer");

                    b.Property<decimal?>("WednesdayPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("WednesdayTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Shift");
                });

            modelBuilder.Entity("Domain.Models.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Capacity")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TournamentSteps")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tournament");
                });

            modelBuilder.Entity("Domain.Models.UserBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookedType")
                        .HasColumnType("integer");

                    b.Property<bool>("Canceled")
                        .HasColumnType("boolean");

                    b.Property<int>("CategoryType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("interval");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WeightRangeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("WeightRangeId");

                    b.ToTable("UserBooking");
                });

            modelBuilder.Entity("Domain.Models.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ArTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("EnMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EnTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("Seen")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("Domain.Models.WeightRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("WeightRange");
                });

            modelBuilder.Entity("Domain.Models.WeightRangeWithDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WeightRangeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("WeightRangeId");

                    b.ToTable("WeightRangeWithDay");
                });

            modelBuilder.Entity("Domain.Models.WeightRangeWithDayWithSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WeightRangeWithDayId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeightRangeWithDayId");

                    b.ToTable("WeightRangeWithDayWithSlot");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ApplicationUser", b =>
                {
                    b.HasOne("Domain.Models.Registration", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("Domain.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Domain.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.BookingTicket", b =>
                {
                    b.HasOne("Domain.Models.UserBooking", "UserBooking")
                        .WithMany("BookingTickets")
                        .HasForeignKey("UserBookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserBooking");
                });

            modelBuilder.Entity("Domain.Models.Calendar", b =>
                {
                    b.HasOne("Domain.Models.Tournament", "Tournament")
                        .WithMany("Calendars")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Domain.Models.Cart", b =>
                {
                    b.HasOne("Domain.Models.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.City", b =>
                {
                    b.HasOne("Domain.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Models.Log", b =>
                {
                    b.HasOne("Domain.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.HasOne("Domain.Models.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserBooking", "UserBooking")
                        .WithMany()
                        .HasForeignKey("UserBookingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tournament");

                    b.Navigation("User");

                    b.Navigation("UserBooking");
                });

            modelBuilder.Entity("Domain.Models.PersonalData", b =>
                {
                    b.HasOne("Domain.Models.City", "Cities")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Country", "Countries")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Desire", "Desire")
                        .WithMany()
                        .HasForeignKey("DesireId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Nationality", "Nationalities")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cities");

                    b.Navigation("Countries");

                    b.Navigation("Desire");

                    b.Navigation("Nationalities");
                });

            modelBuilder.Entity("Domain.Models.RefundOrder", b =>
                {
                    b.HasOne("Domain.Models.Order", "Order")
                        .WithOne("RefundOrder")
                        .HasForeignKey("Domain.Models.RefundOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Models.Registration", b =>
                {
                    b.HasOne("Domain.Models.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Domain.Models.SNSSubscription", b =>
                {
                    b.HasOne("Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("SNSSubscription")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.HasOne("Domain.Models.Calendar", "Calendar")
                        .WithMany("Schedules")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("Domain.Models.Shift", b =>
                {
                    b.HasOne("Domain.Models.Schedule", "Schedule")
                        .WithMany("Shifts")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Domain.Models.UserBooking", b =>
                {
                    b.HasOne("Domain.Models.Registration", "Registration")
                        .WithMany("UserBooking")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Tournament", "Tournament")
                        .WithMany("UserBooking")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.WeightRange", "WeightRange")
                        .WithMany()
                        .HasForeignKey("WeightRangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Registration");

                    b.Navigation("Tournament");

                    b.Navigation("WeightRange");
                });

            modelBuilder.Entity("Domain.Models.UserNotification", b =>
                {
                    b.HasOne("Domain.Models.ApplicationUser", "User")
                        .WithMany("UserNotification")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.WeightRangeWithDay", b =>
                {
                    b.HasOne("Domain.Models.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.WeightRange", "WeightRange")
                        .WithMany("WeightRangeWithDays")
                        .HasForeignKey("WeightRangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tournament");

                    b.Navigation("WeightRange");
                });

            modelBuilder.Entity("Domain.Models.WeightRangeWithDayWithSlot", b =>
                {
                    b.HasOne("Domain.Models.WeightRangeWithDay", "WeightRangeWithDay")
                        .WithMany("WeightRangeWithDaysWithSlots")
                        .HasForeignKey("WeightRangeWithDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WeightRangeWithDay");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("SNSSubscription");

                    b.Navigation("UserNotification");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Models.Calendar", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Navigation("RefundOrder");
                });

            modelBuilder.Entity("Domain.Models.Registration", b =>
                {
                    b.Navigation("UserBooking");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Domain.Models.Tournament", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("UserBooking");
                });

            modelBuilder.Entity("Domain.Models.UserBooking", b =>
                {
                    b.Navigation("BookingTickets");
                });

            modelBuilder.Entity("Domain.Models.WeightRange", b =>
                {
                    b.Navigation("WeightRangeWithDays");
                });

            modelBuilder.Entity("Domain.Models.WeightRangeWithDay", b =>
                {
                    b.Navigation("WeightRangeWithDaysWithSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
